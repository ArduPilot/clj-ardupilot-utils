<!-- Logback Configuration. See http://logback.qos.ch/ -->
<configuration>

  <timestamp key="date" datePattern="yyyy-MM-dd"/>

  <!-- suppress anything from apache http -->
  <logger name="org.apache.http" level="WARN"/>

  <evaluator name="DISP_CALLER_EVAL">
    <expression>throwable == null &amp;&amp; level > WARN</expression>
  </evaluator>

  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">

    <!-- Default encoder is ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
    <encoder>
      <!-- two-line layout suitable for a terminal -->
      <pattern>%white(%date{HH:mm:ss.SSS}) %highlight(%-5level) %green([%thread]) %msg%n%caller{20, DISP_CALLER_EVAL}%n</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- The output file configuration for log/app.log -->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- Default encoder is ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
    <encoder>
      <pattern>%date{HH:mm:ss.SSS} %-5level [%thread] %msg%n%caller{20, DISP_CALLER_EVAL}%n</pattern>
    </encoder>

    <!-- Default location of log file is log/app.log -->
    <file>${user.home}/.swiftgcs/logs/${date}.log</file>

    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!-- Roll over log files daily -->
      <fileNamePattern>${user.home}/.swiftgcs/logs/%d{yyyy-MM-dd}.%i.log</fileNamePattern>

      <!-- And start a new file every 64 MB -->
      <maxFileSize>64 MB</maxFileSize>

      <maxHistory>180</maxHistory>

      <!-- Up to a maximum of 512 MB -->
      <totalSizeCap>512MB</totalSizeCap>

      <!-- Ensure short-lived processes still clean up old logs -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>
  </appender>

  <appender name="ASYNC_CONSOLE" class="ch.qos.logback.classic.AsyncAppender">
    <appender-ref ref="CONSOLE" />

    <neverBlock>true</neverBlock>

    <includeCallerData>true</includeCallerData>

    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
  </appender>

  <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
    <appender-ref ref="FILE" />
 
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>DEBUG</level>
    </filter>
  </appender>

  <!-- Configure the Sentry appender, overriding the logging threshold to the WARN level -->
  <appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
  </appender>

  <!-- Root log level is "ALL", meaning all log levels are emitted. -->
  <root level="ALL">
    <!-- Send all log messages to console (filtered to WARN) -->
    <appender-ref ref="ASYNC_CONSOLE" />

    <appender-ref ref="ASYNC_FILE" />

    <appender-ref ref="Sentry" />
  </root>


  <!-- Make java.util.logging more efficient at disabled levels.
       See http://logback.qos.ch/manual/configuration.html#LevelChangePropagator -->
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
    <resetJUL>true</resetJUL>
  </contextListener>
</configuration>
